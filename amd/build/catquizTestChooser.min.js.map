{"version":3,"file":"catquizTestChooser.min.js","sources":["../src/catquizTestChooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for mod_form to reload when a CAT model has been chosen.\n *\n * @module     mod_adaptivequiz/catquizTestChooser\n * @copyright  2023 Georg Mai√üer <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst SELECTORS = {\n    CATTESTCHOOSER: '[data-on-change-action]',\n    CATTESTSUBMIT: '[data-action=\"submitCatTest\"]',\n    CATSCALESUBMIT: '[data-action=\"submitCatScale\"]',\n    CATSCALESUBMITCONTAINER: '[id=\"fitem_id_submitcatscaleoption\"]',\n    CATTESTCHECKBOXES: 'input[name^=\"catquiz_subscalecheckbox\"]',\n    REPORTSCALECHECKBOXES: 'input[id^=\"id_catquiz_scalereportcheckbox\"]',\n    NUMBEROFFEEDBACKSSUBMIT: '[data-action=\"submitNumberOfFeedbackOptions\"]'\n};\n\n/**\n * Initialise it all.\n */\nexport const init = () => {\n\n    const selectors = document.querySelectorAll(SELECTORS.CATTESTCHOOSER);\n    const checkboxes = document.querySelectorAll(SELECTORS.CATTESTCHECKBOXES);\n    const reportscalecheckboxes = document.querySelectorAll(SELECTORS.REPORTSCALECHECKBOXES);\n\n    var elements = new Set([\n        ...selectors,\n        ...checkboxes\n    ]);\n    if (!elements) {\n        return;\n    }\n\n    if (elements.length === 0) {\n        return;\n    }\n    elements.forEach(selector =>\n        selector.addEventListener('change', e => {\n            // Setting defines if reload should be triggered automatically.\n            if (e.target.dataset.manualreload) {\n                let submitbuttoncontainer = document.querySelector(SELECTORS.CATSCALESUBMITCONTAINER);\n                submitbuttoncontainer.classList.remove('hidden');\n\n                let submitbutton = document.querySelector(SELECTORS.CATSCALESUBMIT);\n                submitbutton.classList.remove('btn-primary');\n                submitbutton.classList.add('btn-danger');\n                submitbutton.classList.remove('hidden');\n                return;\n            }\n\n            switch (e.target.dataset.onChangeAction) {\n                case 'reloadTestForm':\n                    clickNoSubmitButton(e.target, SELECTORS.CATTESTSUBMIT);\n                    break;\n                case 'reloadFormFromScaleSelect':\n                    clickNoSubmitButton(e.target, SELECTORS.CATSCALESUBMIT);\n                    break;\n                case 'numberOfFeedbacksSubmit':\n                    clickNoSubmitButton(e.target, SELECTORS.NUMBEROFFEEDBACKSSUBMIT);\n                    break;\n            }\n\n        })\n    );\n\n    // Add a listener to the report checkboxes\n    var checkboxelements = new Set([\n        ...reportscalecheckboxes\n    ]);\n    if (!checkboxelements || checkboxelements.length == 0) {\n        return;\n    }\n\n    // On the first run when the page is loaded set the status according to\n    // saved fields and add event listeners.\n    checkboxelements.forEach(selector => {\n        setCardDisabledStatus(selector);\n        selector.addEventListener('change', e => setCardDisabledStatus(e.target));\n    });\n};\n\n/**\n * Checks the report scale checkbox and disables/enables the input fields accordingly\n *\n * @param {HTMLElement} element\n */\nfunction setCardDisabledStatus(element) {\n    let reportScale = element.checked;\n    let ownId = element.id || element.name;\n    // Get the closest parent.\n    let cardBody = element.closest('.card-body');\n    if (!reportScale) {\n        cardBody.classList.add('card-body-disabled');\n    } else {\n        cardBody.classList.remove('card-body-disabled');\n    }\n    // We want to just disable the form fields for the currently selected scale, not the nested scales.\n    let currentScaleFields = [...cardBody.children].filter(c => !c.id.match(/^accordion/));\n\n    currentScaleFields.forEach(element => {\n        // Add or remove a 'disabled' class to all child input elements.\n        element\n            .getElementsByTagName('input')\n            .forEach((i) => {\n                if (i.id == ownId) {\n                    return;\n                }\n                if (!reportScale) {\n                    i.classList.add('disabled');\n                } else {\n                    i.classList.remove('disabled');\n                }\n            });\n\n        // Set the 'contenteditable' attribute of the text editor to disable/enable editing.\n        element\n            .getElementsByClassName('editor_atto_content')\n            .forEach((el) => {\n                el.setAttribute('contenteditable', reportScale);\n            });\n    });\n}\n\n/**\n * No Submit Button triggered.\n * @param {HTMLElement} element\n * @param {string} buttonselector\n */\nfunction clickNoSubmitButton(element, buttonselector) {\n\n    const form = element.closest('form');\n    // Find container for query selector.\n    const submitCatTest = form.querySelector(buttonselector);\n    const fieldset = submitCatTest.closest('fieldset');\n\n    // eslint-disable-next-line no-console\n    console.log(submitCatTest, 'submitCatTest');\n\n    const url = new URL(form.action);\n    url.hash = fieldset.id;\n\n    form.action = url.toString();\n    submitCatTest.click();\n}\n"],"names":["SELECTORS","setCardDisabledStatus","element","reportScale","checked","ownId","id","name","cardBody","closest","classList","remove","add","children","filter","c","match","forEach","getElementsByTagName","i","getElementsByClassName","el","setAttribute","clickNoSubmitButton","buttonselector","form","submitCatTest","querySelector","fieldset","console","log","url","URL","action","hash","toString","click","selectors","document","querySelectorAll","checkboxes","reportscalecheckboxes","elements","Set","length","selector","addEventListener","e","target","dataset","manualreload","submitbutton","onChangeAction","checkboxelements"],"mappings":";;;;;;;;MAuBMA,yBACc,0BADdA,wBAEa,gCAFbA,yBAGc,iCAHdA,kCAIuB,uCAJvBA,4BAKiB,0CALjBA,gCAMqB,8CANrBA,kCAOuB,yDAyEpBC,sBAAsBC,aACvBC,YAAcD,QAAQE,QACtBC,MAAQH,QAAQI,IAAMJ,QAAQK,KAE9BC,SAAWN,QAAQO,QAAQ,cAC1BN,YAGDK,SAASE,UAAUC,OAAO,sBAF1BH,SAASE,UAAUE,IAAI,sBAKF,IAAIJ,SAASK,UAAUC,QAAOC,IAAMA,EAAET,GAAGU,MAAM,gBAErDC,SAAQf,UAEvBA,QACKgB,qBAAqB,SACrBD,SAASE,IACFA,EAAEb,IAAMD,QAGPF,YAGDgB,EAAET,UAAUC,OAAO,YAFnBQ,EAAET,UAAUE,IAAI,gBAO5BV,QACKkB,uBAAuB,uBACvBH,SAASI,KACNA,GAAGC,aAAa,kBAAmBnB,4BAU1CoB,oBAAoBrB,QAASsB,sBAE5BC,KAAOvB,QAAQO,QAAQ,QAEvBiB,cAAgBD,KAAKE,cAAcH,gBACnCI,SAAWF,cAAcjB,QAAQ,YAGvCoB,QAAQC,IAAIJ,cAAe,uBAErBK,IAAM,IAAIC,IAAIP,KAAKQ,QACzBF,IAAIG,KAAON,SAAStB,GAEpBmB,KAAKQ,OAASF,IAAII,WAClBT,cAAcU,sBA3HE,WAEVC,UAAYC,SAASC,iBAAiBvC,0BACtCwC,WAAaF,SAASC,iBAAiBvC,6BACvCyC,sBAAwBH,SAASC,iBAAiBvC,qCAEpD0C,SAAW,IAAIC,IAAI,IAChBN,aACAG,gBAEFE,UAImB,IAApBA,SAASE,QAGbF,SAASzB,SAAQ4B,UACbA,SAASC,iBAAiB,UAAUC,OAE5BA,EAAEC,OAAOC,QAAQC,aAAc,CACHZ,SAASX,cAAc3B,mCAC7BU,UAAUC,OAAO,cAEnCwC,aAAeb,SAASX,cAAc3B,iCAC1CmD,aAAazC,UAAUC,OAAO,eAC9BwC,aAAazC,UAAUE,IAAI,mBAC3BuC,aAAazC,UAAUC,OAAO,iBAI1BoC,EAAEC,OAAOC,QAAQG,oBAChB,iBACD7B,oBAAoBwB,EAAEC,OAAQhD,mCAE7B,4BACDuB,oBAAoBwB,EAAEC,OAAQhD,oCAE7B,0BACDuB,oBAAoBwB,EAAEC,OAAQhD,6CAQ1CqD,iBAAmB,IAAIV,IAAI,IACxBF,wBAEFY,kBAA+C,GAA3BA,iBAAiBT,QAM1CS,iBAAiBpC,SAAQ4B,WACrB5C,sBAAsB4C,UACtBA,SAASC,iBAAiB,UAAUC,GAAK9C,sBAAsB8C,EAAEC"}