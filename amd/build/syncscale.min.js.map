{"version":3,"file":"syncscale.min.js","sources":["../src/syncscale.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    SYNCBUTTON: '#sync_button'\n};\n\n/**\n * Add event listener to buttons.\n * @param {Object} config Configuration object containing centralHost\n */\nexport const init = (config) => {\n    const centralHost = config.centralHost;\n    const syncButton = document.querySelector(SELECTORS.SYNCBUTTON);\n    if (!syncButton) {\n        return;\n    }\n\n    syncButton.addEventListener('click', () => {\n        fetchParameters(centralHost);\n    });\n};\n\n/**\n * Aggregate warnings by type and message.\n * @param {Array} warnings Array of warning objects\n * @return {Array} Aggregated warnings\n */\nconst aggregateWarnings = (warnings) => {\n    const warningMap = new Map();\n    let index = 0; // Add index counter.\n\n    warnings.forEach(warning => {\n        const key = warning.warning;\n        if (warningMap.has(key)) {\n            const existingWarning = warningMap.get(key);\n            existingWarning.uniqueItems.add(warning.item);\n            existingWarning.items = Array.from(existingWarning.uniqueItems);\n            existingWarning.count++;\n        } else {\n            warningMap.set(key, {\n                message: warning.warning,\n                count: 1,\n                uniqueItems: new Set([warning.item]),\n                items: [warning.item],\n                index: index++ // Add unique index for each warning.\n            });\n        }\n    });\n\n    return Array.from(warningMap.values()).map(({message, count, items, index}) => ({\n        message,\n        count,\n        items,\n        index,\n        multipleItems: items.length > 1\n    }));\n};\n\n\n/**\n * Fetch parameters from central instance.\n * @param {string} centralHost The host URL of the central instance\n */\nconst fetchParameters = async(centralHost) => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const scaleid = urlParams.get('scaleid');\n    let modal = null;\n    const fetchMessage = await getString('fetchingparameters', 'local_catquiz');\n    try {\n        // Create and show loading modal.\n        modal = await ModalFactory.create({\n            title: await getString('fetchparamheading', 'local_catquiz', centralHost),\n            body: `<div class=\"text-center\"><i class=\"fa fa-spinner fa-spin fa-2x\"></i><p>${fetchMessage}</p></div>`,\n            removeOnClose: true,\n            large: true\n        });\n        modal.show();\n\n        // Call webservice.\n        const result = await Ajax.call([{\n            methodname: 'local_catquiz_client_fetch_parameters',\n            args: {\n                scaleid: scaleid\n            }\n        }])[0];\n\n        // Handle errors from the webservice.\n        if (result.error) {\n            throw new Error(result.error);\n        }\n\n        // Handle empty or invalid responses.\n        if (!result || typeof result.status === 'undefined') {\n            throw new Error(await getString('invalidresponse', 'local_catquiz'));\n        }\n\n        // Aggregate warnings before rendering.\n        const aggregatedWarnings = aggregateWarnings(result.warnings);\n\n        // Create result content.\n        const content = await Templates.render('local_catquiz/fetch_parameters_result', {\n            status: result.status,\n            message: result.message,\n            duration: result.duration,\n            synced: result.synced,\n            errors: result.errors,\n            warnings: aggregatedWarnings,\n            hasWarnings: aggregatedWarnings.length > 0\n        });\n\n        // Update modal.\n        modal.setTitle(await getString('fetchparamheading', 'local_catquiz', centralHost));\n        modal.setBody(content);\n\n        // Add close button.\n        const footer = modal.getFooter();\n        footer.empty();\n        const closeButton = '<button class=\"btn btn-primary\" data-action=\"hide\">' +\n            await getString('close', 'core') + '</button>';\n        footer.append(closeButton);\n\n        // Disable sync button.\n        document.querySelector(SELECTORS.SYNCBUTTON).setAttribute('disabled', true);\n\n        // Register close handler.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Reload page if sync was successful.\n            if (result.status) {\n                window.location.reload();\n            }\n        });\n\n    } catch (error) {\n        // If we have a modal, show error there.\n        if (modal) {\n            const errorMessage = error.message || await getString('unknownerror', 'local_catquiz');\n            try {\n                const errorContent = await Templates.render('local_catquiz/fetch_parameters_result', {\n                    status: false,\n                    message: errorMessage,\n                    duration: 0,\n                    synced: 0,\n                    errors: 1,\n                    warnings: [],\n                    hasWarnings: false\n                });\n                modal.setTitle(await getString('error', 'core'));\n                modal.setBody(errorContent);\n\n                // Add close button.\n                const footer = modal.getFooter();\n                footer.empty();\n                const closeButton = '<button class=\"btn btn-primary\" data-action=\"hide\">' +\n                    await getString('close', 'core') + '</button>';\n                footer.append(closeButton);\n            } catch (templateError) {\n                // If template rendering fails, show basic error.\n                modal.setBody('<div class=\"alert alert-danger\">' + errorMessage + '</div>');\n            }\n        } else {\n            // If we don't have a modal yet, use notification.\n            Notification.exception(error);\n        }\n    }\n};\n"],"names":["SELECTORS","config","centralHost","syncButton","document","querySelector","addEventListener","fetchParameters","async","scaleid","URLSearchParams","window","location","search","get","modal","fetchMessage","ModalFactory","create","title","body","removeOnClose","large","show","result","Ajax","call","methodname","args","error","Error","status","aggregatedWarnings","warnings","warningMap","Map","index","forEach","warning","key","has","existingWarning","uniqueItems","add","item","items","Array","from","count","set","message","Set","values","map","_ref","multipleItems","length","aggregateWarnings","content","Templates","render","duration","synced","errors","hasWarnings","setTitle","setBody","footer","getFooter","empty","closeButton","append","setAttribute","getRoot","on","ModalEvents","hidden","reload","errorMessage","errorContent","templateError","exception"],"mappings":";;;;;wUA4BMA,qBACU,6BAOKC,eACXC,YAAcD,OAAOC,YACrBC,WAAaC,SAASC,cAAcL,sBACrCG,YAILA,WAAWG,iBAAiB,SAAS,KACjCC,gBAAgBL,uBA6ClBK,gBAAkBC,MAAAA,oBAEdC,QADY,IAAIC,gBAAgBC,OAAOC,SAASC,QAC5BC,IAAI,eAC1BC,MAAQ,WACNC,mBAAqB,mBAAU,qBAAsB,qBAGvDD,YAAcE,uBAAaC,OAAO,CAC9BC,YAAa,mBAAU,oBAAqB,gBAAiBjB,aAC7DkB,KAAO,0EAAyEJ,yBAChFK,eAAe,EACfC,OAAO,IAEXP,MAAMQ,aAGAC,aAAeC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,wCACZC,KAAM,CACFnB,QAASA,YAEb,MAGAe,OAAOK,YACD,IAAIC,MAAMN,OAAOK,WAItBL,aAAmC,IAAlBA,OAAOO,aACnB,IAAID,YAAY,mBAAU,kBAAmB,wBAIjDE,mBAtEaC,CAAAA,iBACjBC,WAAa,IAAIC,QACnBC,MAAQ,SAEZH,SAASI,SAAQC,gBACPC,IAAMD,QAAQA,WAChBJ,WAAWM,IAAID,KAAM,OACfE,gBAAkBP,WAAWpB,IAAIyB,KACvCE,gBAAgBC,YAAYC,IAAIL,QAAQM,MACxCH,gBAAgBI,MAAQC,MAAMC,KAAKN,gBAAgBC,aACnDD,gBAAgBO,aAEhBd,WAAWe,IAAIV,IAAK,CAChBW,QAASZ,QAAQA,QACjBU,MAAO,EACPN,YAAa,IAAIS,IAAI,CAACb,QAAQM,OAC9BC,MAAO,CAACP,QAAQM,MAChBR,MAAOA,aAKZU,MAAMC,KAAKb,WAAWkB,UAAUC,KAAIC,WAACJ,QAACA,QAADF,MAAUA,MAAVH,MAAiBA,MAAjBT,MAAwBA,kBAAY,CAC5Ec,QAAAA,QACAF,MAAAA,MACAH,MAAAA,MACAT,MAAAA,MACAmB,cAAeV,MAAMW,OAAS,OA2CHC,CAAkBjC,OAAOS,UAG9CyB,cAAgBC,mBAAUC,OAAO,wCAAyC,CAC5E7B,OAAQP,OAAOO,OACfmB,QAAS1B,OAAO0B,QAChBW,SAAUrC,OAAOqC,SACjBC,OAAQtC,OAAOsC,OACfC,OAAQvC,OAAOuC,OACf9B,SAAUD,mBACVgC,YAAahC,mBAAmBwB,OAAS,IAI7CzC,MAAMkD,eAAe,mBAAU,oBAAqB,gBAAiB/D,cACrEa,MAAMmD,QAAQR,eAGRS,OAASpD,MAAMqD,YACrBD,OAAOE,cACDC,YAAc,4DACV,mBAAU,QAAS,QAAU,YACvCH,OAAOI,OAAOD,aAGdlE,SAASC,cAAcL,sBAAsBwE,aAAa,YAAY,GAGtEzD,MAAM0D,UAAUC,GAAGC,sBAAYC,QAAQ,KAE/BpD,OAAOO,QACPpB,OAAOC,SAASiE,YAI1B,MAAOhD,UAEDd,MAAO,OACD+D,aAAejD,MAAMqB,eAAiB,mBAAU,eAAgB,2BAE5D6B,mBAAqBpB,mBAAUC,OAAO,wCAAyC,CACjF7B,QAAQ,EACRmB,QAAS4B,aACTjB,SAAU,EACVC,OAAQ,EACRC,OAAQ,EACR9B,SAAU,GACV+B,aAAa,IAEjBjD,MAAMkD,eAAe,mBAAU,QAAS,SACxClD,MAAMmD,QAAQa,oBAGRZ,OAASpD,MAAMqD,YACrBD,OAAOE,cACDC,YAAc,4DACV,mBAAU,QAAS,QAAU,YACvCH,OAAOI,OAAOD,aAChB,MAAOU,eAELjE,MAAMmD,QAAQ,mCAAqCY,aAAe,sCAIzDG,UAAUpD"}