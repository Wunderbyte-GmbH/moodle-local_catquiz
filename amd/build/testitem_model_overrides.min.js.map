{"version":3,"file":"testitem_model_overrides.min.js","sources":["../src/testitem_model_overrides.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\n\nconst SELECTORS = {\n    FORMCONTAINER: '#lcq_model_override_form',\n    NOEDITBUTTON: '[name=\"noedititemparams\"]',\n    MODELSTATUSSELECTS: '#lcq_model_override_form .custom-select[name^=\"override_\"]',\n    ACTIVEMODELSELECT: '[name=\"active_model\"]'\n};\n\nconst disabledStates = [\"0\", \"-5\"];\n\n/**\n * Updates the active_model select according to the state of the model status\n *\n * If the state of the model is changed to excluded or not yet calculated, it can not be set as active model.\n * If the state is changed to something else, the disabled attribute is removed.\n *\n * @param {HTMLSelectElement} model\n */\nconst syncSelectedState = (model) => {\n        const selected = model.value;\n        const selectorModel = model.id.match(/id_override_(.*)_select/)[1];\n        let optionUpdateFun = (option) => option.removeAttribute('disabled');\n        if (disabledStates.includes(selected)) {\n            optionUpdateFun = (option) => option.setAttribute('disabled', 'disabled');\n        }\n        const activeModelSelect = document.querySelector(SELECTORS.ACTIVEMODELSELECT);\n        activeModelSelect.options.forEach((o) => {\n            if (o.value == selectorModel) {\n                optionUpdateFun(o);\n                return;\n            }\n        });\n};\n\n/**\n * Add event listener to the form\n */\nexport const init = () => {\n    // Initialize the form - pass the container element and the form class name.\n    const dynamicForm = new DynamicForm(document.querySelector(\n        SELECTORS.FORMCONTAINER),\n        'local_catquiz\\\\form\\\\item_model_override_selector'\n    );\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n\n        e.preventDefault();\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true,\n        });\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.NOSUBMIT_BUTTON_PRESSED, (e) => {\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        e.preventDefault();\n        const searchParams = new URLSearchParams(window.location.search);\n\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n        }).then(\n            // Now that the model fields were added, we can add listeners to them.\n            (result) => {\n                const modelSelectors = document.querySelectorAll(SELECTORS.MODELSTATUSSELECTS);\n                modelSelectors.forEach(model => {\n                    syncSelectedState(model);\n                    model.addEventListener('change', (e) => syncSelectedState(e.target));\n            });\n                return result;\n            }\n        ).catch(err => err);\n    });\n};\n"],"names":["SELECTORS","disabledStates","syncSelectedState","model","selected","value","selectorModel","id","match","optionUpdateFun","option","removeAttribute","includes","setAttribute","document","querySelector","options","forEach","o","dynamicForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","e","preventDefault","formcontainer","searchParams","URLSearchParams","window","location","search","load","editing","testitemid","get","contextid","scaleid","component","updateitem","NOSUBMIT_BUTTON_PRESSED","then","result","querySelectorAll","target","catch","err"],"mappings":";;;;;0JAuBMA,wBACa,2BADbA,uBAEY,4BAFZA,6BAGkB,6DAHlBA,4BAIiB,wBAGjBC,eAAiB,CAAC,IAAK,MAUvBC,kBAAqBC,cACbC,SAAWD,MAAME,MACjBC,cAAgBH,MAAMI,GAAGC,MAAM,2BAA2B,OAC5DC,gBAAmBC,QAAWA,OAAOC,gBAAgB,YACrDV,eAAeW,SAASR,YACxBK,gBAAmBC,QAAWA,OAAOG,aAAa,WAAY,aAExCC,SAASC,cAAcf,6BAC/BgB,QAAQC,SAASC,IAC3BA,EAAEb,OAASC,eACXG,gBAAgBS,qBASZ,WAEVC,YAAc,IAAIC,qBAAYN,SAASC,cACzCf,yBACA,qDAGJmB,YAAYE,iBAAiBF,YAAYG,OAAOC,gBAAiBC,IAE7DA,EAAEC,qBACEC,cAAgBZ,SAASC,cACzBf,+BACE2B,aAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QACzDZ,YAAYa,KAAK,CACbC,SAASP,cAAcX,cAAcf,wBACrCkC,WAAYP,aAAaQ,IAAI,MAC7BC,UAAWT,aAAaQ,IAAI,aAC5BE,QAASV,aAAaQ,IAAI,WAC1BG,UAAWX,aAAaQ,IAAI,aAC5BI,YAAY,OAIpBpB,YAAYE,iBAAiBF,YAAYG,OAAOkB,yBAA0BhB,QAClEE,cAAgBZ,SAASC,cACzBf,yBACJwB,EAAEC,uBACIE,aAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QAEzDZ,YAAYa,KAAK,CACbC,SAASP,cAAcX,cAAcf,wBACrCkC,WAAYP,aAAaQ,IAAI,MAC7BC,UAAWT,aAAaQ,IAAI,aAC5BE,QAASV,aAAaQ,IAAI,WAC1BG,UAAWX,aAAaQ,IAAI,eAC7BM,MAEEC,SAC0B5B,SAAS6B,iBAAiB3C,8BAClCiB,SAAQd,QACnBD,kBAAkBC,OAClBA,MAAMkB,iBAAiB,UAAWG,GAAMtB,kBAAkBsB,EAAEoB,aAEzDF,UAEbG,OAAMC,KAAOA"}