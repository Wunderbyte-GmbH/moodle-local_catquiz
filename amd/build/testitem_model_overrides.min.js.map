{"version":3,"file":"testitem_model_overrides.min.js","sources":["../src/testitem_model_overrides.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\n\nconst SELECTORS = {\n    FORMCONTAINER: '#lcq_model_override_form',\n    NOEDITBUTTON: '[name=\"noedititemparams\"]',\n    MODELSTATUSSELECTS: '#lcq_model_override_form .custom-select[name^=\"override_\"]',\n    ACTIVEMODELSELECT: '[name=\"active_model\"]',\n    TEMP_FIELDS_INPUT: '[name=\"temporaryfields\"]'\n};\n\nconst disabledStates = [\"0\", \"-5\"];\n\n/**\n * Updates the active_model select according to the state of the model status\n *\n * If the state of the model is changed to excluded or not yet calculated, it can not be set as active model.\n * If the state is changed to something else, the disabled attribute is removed.\n *\n * @param {HTMLSelectElement} model\n */\nconst syncSelectedState = (model) => {\n        const selected = model.value;\n        const selectorModel = model.id.match(/id_override_(.*)_select/)[1];\n        let optionUpdateFun = (option) => option.removeAttribute('disabled');\n        if (disabledStates.includes(selected)) {\n            optionUpdateFun = (option) => option.setAttribute('disabled', 'disabled');\n        }\n        const activeModelSelect = document.querySelector(SELECTORS.ACTIVEMODELSELECT);\n        activeModelSelect.options.forEach((o) => {\n            if (o.value == selectorModel) {\n                optionUpdateFun(o);\n                return;\n            }\n        });\n};\n\nconst collectNewParamData = (addedParamIds) => {\n    console.log(\"Getting field values for added parameters\");\n    let finalData = {};\n    addedParamIds.forEach(newParam => {\n        const model = newParam.model;\n        finalData[model] = finalData[model] || [];\n        const ids = newParam.ids;\n        const params = {};\n        ids.forEach(id => {\n            const element = document.getElementById(id);\n            const value = element.value;\n            params[id] = value;\n        });\n        finalData[model].push(params)\n    });\n    return finalData;\n}\n\nfunction restructureFormElements() {\n    // Find all .align-items-center containers\n    const containers = document.querySelectorAll('#lcq_model_override_form .param-group .align-items-center');\n    \n    containers.forEach(container => {\n        // Check if this container has a fraction input\n        const fractionInput = container.querySelector('input[type^=\"fraction_\"]');\n        if (!fractionInput) return; // Skip if no fraction input found\n        \n        // Find the model name from the Add button\n        const addButton = container.querySelector('[data-action=\"additemparams\"]');\n        const modelName = addButton?.getAttribute('data-model') || '';\n        \n        const elements = Array.from(container.children);\n        \n        // Create new array to store restructured elements\n        const restructured = [];\n        // Keep track of how many pairs we've processed for data-param-num\n        let pairCounter = 0;\n        \n        // Process elements sequentially\n        for (let i = 0; i < elements.length; i++) {\n            const currentElement = elements[i];\n            \n            // Check if this is the Add button container\n            if (currentElement.querySelector('[data-action=\"additemparams\"]')) {\n                restructured.push(currentElement.cloneNode(true));\n                continue;\n            }\n            \n            // Check if this is the start of a fraction input group\n            if (currentElement.tagName === 'LABEL' && \n                elements[i + 1]?.tagName === 'INPUT' && \n                elements[i + 1].getAttribute('type')?.startsWith('fraction_')) {\n                \n                // Find the corresponding difficulty elements\n                const nextLabel = elements[i + 3];\n                const nextInput = elements[i + 4];\n                \n                if (nextInput?.getAttribute('type')?.startsWith('difficulty_')) {\n                    // Create pair wrapper\n                    const pairDiv = document.createElement('div');\n                    pairDiv.className = 'param-pair';\n                    \n                    // Create fraction wrapper\n                    const wrapper1 = document.createElement('div');\n                    wrapper1.className = 'input-wrapper';\n                    wrapper1.appendChild(currentElement.cloneNode(true));\n                    wrapper1.appendChild(elements[i + 1].cloneNode(true));\n                    \n                    // Create difficulty wrapper\n                    const wrapper2 = document.createElement('div');\n                    wrapper2.className = 'input-wrapper';\n                    wrapper2.appendChild(nextLabel.cloneNode(true));\n                    wrapper2.appendChild(nextInput.cloneNode(true));\n                    \n                    // Create delete button with data attributes\n                    const deleteBtn = document.createElement('button');\n                    deleteBtn.className = 'btn btn-danger param-delete';\n                    deleteBtn.textContent = 'Delete';\n                    deleteBtn.setAttribute('data-param-num', pairCounter);\n                    deleteBtn.setAttribute('data-param-model', modelName);\n                    deleteBtn.onclick = function() {\n                        // Add your delete logic here\n                        pairDiv.remove();\n                    };\n                    \n                    // Assemble the pair\n                    pairDiv.appendChild(wrapper1);\n                    pairDiv.appendChild(wrapper2);\n                    pairDiv.appendChild(deleteBtn);\n                    \n                    restructured.push(pairDiv);\n                    \n                    // Skip the elements we just processed\n                    i += 4;\n                    // Increment pair counter\n                    pairCounter++;\n                }\n            } else if (currentElement.classList.contains('break')) {\n                // Keep break elements\n                restructured.push(currentElement.cloneNode(true));\n            }\n        }\n        \n        // Clear and repopulate the container\n        container.innerHTML = '';\n        restructured.forEach(element => container.appendChild(element));\n    });\n}\n\n/**\n * Add event listener to the form\n */\nexport const init = () => {\n    // Initialize the form - pass the container element and the form class name.\n    const dynamicForm = new DynamicForm(document.querySelector(\n        SELECTORS.FORMCONTAINER),\n        'local_catquiz\\\\form\\\\item_model_override_selector'\n    );\n\n    const switchEditMode = (targetModeIsEditing) => {\n        console.log(`Switching edit mode to: ${targetModeIsEditing}`);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: targetModeIsEditing,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true\n        }).then(\n            // Now that the model fields were added, we can add listeners to them.\n            (result) => {\n                const modelSelectors = document.querySelectorAll(SELECTORS.MODELSTATUSSELECTS);\n                modelSelectors.forEach(model => {\n                    syncSelectedState(model);\n                    model.addEventListener('change', (e) => syncSelectedState(e.target));\n            });\n                // Add delete buttons etc.\n                restructureFormElements();\n                return result;\n            }\n        ).catch(err => err);\n    }\n\n    const addItemParams = (e) => {\n        const searchParams = new URLSearchParams(window.location.search);\n        console.log('In add item params');\n        console.log(e);\n        // Construct the new input fields.\n        const lastBreak = e.detail.parentElement.parentElement.previousElementSibling;\n        const paramGroup = e.detail.closest('.param-group');\n        // Get the current highest number from existing fraction/difficulty inputs\n        const existingInputs = paramGroup.querySelectorAll('input[type^=\"fraction_\"], input[type^=\"difficulty_\"]');\n        const currentMax = Math.max(...Array.from(existingInputs)\n            .map(input => parseInt(input.getAttribute('type').split('_')[1] || '0'))\n        );\n        const newNumber = currentMax + 1;\n\n        const newFractionLabel = document.createElement('label');\n        newFractionLabel.textContent = `Fraction ${newNumber}`;\n        newFractionLabel.setAttribute('for', `fraction_${newNumber}`);\n        const newFractionInput = document.createElement('input');\n        newFractionInput.className = 'form-control param-input';\n        newFractionInput.id = `fraction_${newNumber}`;\n        newFractionInput.setAttribute('type', `fraction_${newNumber}`);\n\n        const newDifficultyLabel = document.createElement('label');\n        newDifficultyLabel.textContent = `Difficulty ${newNumber}`;\n        newDifficultyLabel.setAttribute('for', `difficulty_${newNumber}`);\n        const newDifficultyInput = document.createElement('input');\n        newDifficultyInput.className = 'form-control param-input';\n        newDifficultyInput.id = `difficulty_${newNumber}`;\n        newDifficultyInput.setAttribute('type', `difficulty_${newNumber}`);\n\n        lastBreak.insertAdjacentElement('afterend', newDifficultyInput);\n        lastBreak.insertAdjacentElement('afterend', newDifficultyLabel);\n        lastBreak.insertAdjacentElement('afterend', newFractionInput);\n        lastBreak.insertAdjacentElement('afterend', newFractionLabel);\n\n\n        // Add the IDs of newly added fields to the tempFieldsInput, so that we\n        // can collect them easily when the form is submitted.\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        let tempids = JSON.parse(tempFieldsInput.value);\n        const tempData = {\n            model: e.detail.dataset.model,\n            ids: [newDifficultyInput.getAttribute('id'), newFractionInput.getAttribute('id')]\n        }\n        tempids.push(tempData);\n        tempFieldsInput.value = JSON.stringify(tempids);\n    }\n\n    dynamicForm.addEventListener(dynamicForm.events.SUBMIT_BUTTON_PRESSED, (e) => {\n        console.log('Submit button pressed');\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        const addedParamIds = JSON.parse(tempFieldsInput.value);\n        console.log(addedParamIds);\n        const newParamData = collectNewParamData(addedParamIds);\n        // TODO: Replace with working code.\n        tempFieldsInput.value = JSON.stringify(newParamData);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n        console.log('Form submitted');\n        e.preventDefault();\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true,\n        });\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.NOSUBMIT_BUTTON_PRESSED, (e) => {\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        e.preventDefault();\n        switch (e.detail.name) {\n            case 'edititemparams':\n                switchEditMode(true);\n                break;\n            case 'noedititemparams':\n                switchEditMode(false);\n                break;\n            case 'override_grm[additemparams]':\n                addItemParams(e);\n                break;\n            default:\n                console.log(`Unknown no-submit action: ${e.detail.name}`)\n        }\n    });\n};\n"],"names":["SELECTORS","disabledStates","syncSelectedState","model","selected","value","selectorModel","id","match","optionUpdateFun","option","removeAttribute","includes","setAttribute","document","querySelector","options","forEach","o","dynamicForm","DynamicForm","switchEditMode","targetModeIsEditing","console","log","searchParams","URLSearchParams","window","location","search","load","editing","testitemid","get","contextid","scaleid","component","updateitem","then","result","querySelectorAll","addEventListener","e","target","container","addButton","modelName","getAttribute","elements","Array","from","children","restructured","pairCounter","i","length","currentElement","push","cloneNode","tagName","_elements$getAttribut","startsWith","nextLabel","nextInput","_nextInput$getAttribu","pairDiv","createElement","className","wrapper1","appendChild","wrapper2","deleteBtn","textContent","onclick","remove","classList","contains","innerHTML","element","catch","err","events","SUBMIT_BUTTON_PRESSED","tempFieldsInput","addedParamIds","JSON","parse","newParamData","finalData","newParam","ids","params","getElementById","collectNewParamData","stringify","FORM_SUBMITTED","preventDefault","formcontainer","NOSUBMIT_BUTTON_PRESSED","detail","name","lastBreak","parentElement","previousElementSibling","existingInputs","closest","newNumber","Math","max","map","input","parseInt","split","newFractionLabel","newFractionInput","newDifficultyLabel","newDifficultyInput","insertAdjacentElement","tempids","tempData","dataset","addItemParams"],"mappings":"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"}