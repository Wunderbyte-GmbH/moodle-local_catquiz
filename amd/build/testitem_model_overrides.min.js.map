{"version":3,"file":"testitem_model_overrides.min.js","sources":["../src/testitem_model_overrides.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    FORMCONTAINER: '#lcq_model_override_form',\n    NOEDITBUTTON: '[name=\"noedititemparams\"]',\n    MODELSTATUSSELECTS: '#lcq_model_override_form .custom-select[name^=\"override_\"]',\n    ACTIVEMODELSELECT: '[name=\"active_model\"]',\n    TEMP_FIELDS_INPUT: '[name=\"temporaryfields\"]',\n    DELETED_PARAMS_FIELD: '[name=\"deletedparams\"]'\n};\n\nconst disabledStates = [\"0\", \"-5\"];\n\n/**\n * Updates the active_model select according to the state of the model status\n *\n * If the state of the model is changed to excluded or not yet calculated, it can not be set as active model.\n * If the state is changed to something else, the disabled attribute is removed.\n *\n * @param {HTMLSelectElement} model\n */\nconst syncSelectedState = (model) => {\n        const selected = model.value;\n        const selectorModel = model.id.match(/id_override_(.*)_select/)[1];\n        let optionUpdateFun = (option) => option.removeAttribute('disabled');\n        if (disabledStates.includes(selected)) {\n            optionUpdateFun = (option) => option.setAttribute('disabled', 'disabled');\n        }\n        const activeModelSelect = document.querySelector(SELECTORS.ACTIVEMODELSELECT);\n        activeModelSelect.options.forEach((o) => {\n            if (o.value == selectorModel) {\n                optionUpdateFun(o);\n                return;\n            }\n        });\n};\n\n/**\n * Add values of newly added parameters to a hidden field.\n *\n * When new parameters are added, we store their IDs.\n * This function is called just before we submit the form. It collects the values of those\n * newly added fields and returns them.\n *\n * @param {Array} addedParamIds Array of objects containing model and parameter IDs to be collected.\n * @return {Object} Object containing collected parameter values grouped by model.\n */\nconst collectNewParamData = (addedParamIds) => {\n    let finalData = {};\n    addedParamIds.forEach(newParam => {\n        const model = newParam.model;\n        finalData[model] = finalData[model] || [];\n        const ids = newParam.ids;\n        const params = {};\n        ids.forEach(id => {\n            const element = document.getElementById(id);\n            const value = element.value;\n            params[id] = value;\n        });\n        finalData[model].push(params);\n    });\n    return finalData;\n};\n\n/**\n * Deletes parameter values for the given model at the given index.\n *\n * If the params were newly added, they are removed from the hidden field that tracks new params.\n * Otherwise, we store information in a hidden field so that the parameters are deleted on the server\n * side once the form is submitted.\n *\n * @param {string} model The model identifier.\n * @param {number} index The index of the parameter set to delete.\n */\nconst deleteParameters = (model, index) => {\n    // First, check if this is found in the tempinput data. If so, just remove it from there.\n    const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n    let tempids = JSON.parse(tempFieldsInput.value);\n    let filtered = tempids.filter((newparams) => {\n        return newparams.model != model && newparams.index != index;\n    });\n    tempFieldsInput.value = JSON.stringify(filtered);\n    // If the parameter was found, it means we do not have to delete it on the server side.\n    // It was temporarily added but not yet saved. So we can return here.\n    if (filtered.length != tempids.length) {\n        return;\n    }\n    // If we are here, the parameter should be deleted on the server side.\n    const deletedParamsField = document.querySelector(SELECTORS.DELETED_PARAMS_FIELD);\n    let deletedParams = JSON.parse(deletedParamsField.value);\n    const deleteParam = {\n        model: model,\n        index: index\n    };\n    deletedParams.push(deleteParam);\n    deletedParamsField.value = JSON.stringify(deletedParams);\n};\n\n/**\n * This adds delete buttons to multiparam models.\n * While at it, it also restructures the HTML a bit by adding some wrapper elements to facilitate styling.\n */\nfunction restructureFormElements() {\n    // Find all .align-items-center containers.\n    const containers = document.querySelectorAll('#lcq_model_override_form .param-group .align-items-center');\n\n    containers.forEach(async container => {\n        // Find the Add button and get model data.\n        const addButton = container.querySelector('[data-action=\"additemparams\"]');\n        if (!addButton) {\n            return; // Skip if no add button found.\n        }\n\n        const modelName = addButton.getAttribute('data-model') || '';\n        // Parse field data into array of field names.\n        const fielddata = addButton.dataset.fields.split(';');\n        const modelFields = fielddata.map(fd => fd.split(':')[0]);\n\n        if (modelFields.length === 0) {\n            return; // Skip if no fields defined.\n        }\n\n        // Create new array to store restructured elements.\n        const restructured = [];\n        let pairCounter = 0;\n        const elements = Array.from(container.children);\n\n        // Process elements sequentially.\n        for (let i = 0; i < elements.length; i++) {\n            const currentElement = elements[i];\n\n            // Preserve Add button.\n            if (currentElement.querySelector('[data-action=\"additemparams\"]')) {\n                restructured.push(currentElement.cloneNode(true));\n                continue;\n            }\n\n            // Check if this is the start of an input group (first field's label).\n            if (currentElement.tagName === 'LABEL' &&\n                elements[i + 1]?.tagName === 'INPUT' &&\n                elements[i + 1].getAttribute('type')?.startsWith(`${modelFields[0]}`)) {\n\n                // Create wrapper for the parameter group.\n                const paramDiv = document.createElement('div');\n                paramDiv.className = 'param-pair';\n\n                let isValidGroup = true;\n                let currentIndex = i;\n\n                // Create wrappers for each field in modelFields.\n                for (const field of modelFields) {\n                    const label = elements[currentIndex];\n                    const input = elements[currentIndex + 1];\n                    const breakElement = elements[currentIndex + 2];\n\n                    // Validate the field group.\n                    if (!label?.tagName === 'LABEL' ||\n                        !input?.tagName === 'INPUT' ||\n                        !input?.getAttribute('type')?.startsWith(field)) {\n                        isValidGroup = false;\n                        break;\n                    }\n\n                    // Create and populate wrapper for this field.\n                    const wrapper = document.createElement('div');\n                    wrapper.className = 'input-wrapper';\n                    wrapper.appendChild(label.cloneNode(true));\n                    wrapper.appendChild(input.cloneNode(true));\n                    paramDiv.appendChild(wrapper);\n\n                    // Move index past current field group.\n                    currentIndex += breakElement?.classList.contains('break') ? 3 : 2;\n                }\n\n                if (isValidGroup) {\n                    // Create delete button.\n                    const deleteBtn = document.createElement('button');\n                    deleteBtn.className = 'btn btn-danger param-delete';\n                    deleteBtn.textContent = 'Delete';\n                    try {\n                        deleteBtn.textContent = await getString('delete');\n                    } catch (error) {\n                        // We already have a fallback, nothing to do here.\n                    }\n                    deleteBtn.setAttribute('data-param-num', pairCounter);\n                    deleteBtn.setAttribute('data-model', modelName);\n                    deleteBtn.onclick = function() {\n                        deleteParameters(this.dataset.model, this.dataset.paramNum);\n                        paramDiv.remove();\n                    };\n\n                    paramDiv.appendChild(deleteBtn);\n                    restructured.push(paramDiv);\n\n                    // Skip processed elements.\n                    i = currentIndex - 1;\n                    pairCounter++;\n                }\n            } else if (currentElement.classList.contains('break')) {\n                // Preserve break elements.\n                restructured.push(currentElement.cloneNode(true));\n            }\n        }\n\n        // Clear and repopulate the container.\n        container.innerHTML = '';\n        restructured.forEach(element => container.appendChild(element));\n    });\n}\n\nconst updateModelDisabledStates = (element) => {\n    const model = element.id.match(/id_override_(.*)_select/)[1];\n    const disabled = element.value == 1;\n    // Find the corresponding input fields\n    const inputElements = document.querySelectorAll(`input[name^=\"override_${model}[\"]`);\n    const deleteButtons = document.querySelectorAll(`button[data-model=\"${model}\"]`);\n    const addButton = document.querySelector(`input[value=\"Add\"][data-model=\"${model}\"]`);\n    const toUpdate = [...inputElements, ...deleteButtons, addButton];\n    toUpdate.forEach(e => {\n        if (disabled) {\n            e.setAttribute('disabled', 'disabled');\n        } else {\n            e.removeAttribute('disabled');\n        }\n    });\n};\n\n/**\n * Add event listener to the form\n */\nexport const init = () => {\n    // Initialize the form - pass the container element and the form class name.\n    const dynamicForm = new DynamicForm(document.querySelector(\n        SELECTORS.FORMCONTAINER),\n        'local_catquiz\\\\form\\\\item_model_override_selector'\n    );\n\n    const switchEditMode = (targetModeIsEditing) => {\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: targetModeIsEditing,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true\n        }).then(\n            // Now that the model fields were added, we can add listeners to them.\n            (result) => {\n                const modelSelectors = document.querySelectorAll(SELECTORS.MODELSTATUSSELECTS);\n                modelSelectors.forEach(model => {\n                    syncSelectedState(model);\n                    model.addEventListener('change', (e) => syncSelectedState(e.target));\n                    model.addEventListener('change', e => updateModelDisabledStates(e.target));\n            });\n                // Add delete buttons etc.\n                restructureFormElements();\n                return result;\n            }\n        ).catch(err => err);\n    };\n\n    const addItemParams = (e) => {\n        // Construct the new input fields.\n        const lastBreak = e.detail.parentElement.parentElement.previousElementSibling;\n        const paramGroup = e.detail.closest('.param-group');\n        // Get the current highest number from existing fraction/difficulty inputs\n        const existingInputs = paramGroup.querySelectorAll('input[type^=\"fraction_\"], input[type^=\"difficulty_\"]');\n        const currentMax = Math.max(...Array.from(existingInputs)\n            .map(input => parseInt(input.getAttribute('type').split('_')[1] || '0'))\n        );\n        const newNumber = currentMax + 1;\n        const pairDiv = document.createElement('div');\n        pairDiv.className = 'param-pair';\n\n        // The fielddata describe the fields to add: \"internalname1:Translated;internalname2:Translated\".\n        // For example: \"difficulty:Schwierigkeit;fraction:Fraction\".\n        const fielddata = e.detail.dataset.fields.split(';');\n        let newIds = [];\n        fielddata.forEach(field => {\n            const fieldarr = field.split(':');\n            const internalName = fieldarr[0];\n            const label = fieldarr[1];\n\n            const newLabel = document.createElement('label');\n            newLabel.textContent = `${label} ${newNumber}`;\n            newLabel.setAttribute('for', `${internalName}_${newNumber}`);\n\n            const newInput = document.createElement('input');\n            newInput.className = 'form-control param-input';\n            newInput.id = `${internalName}_${newNumber}`;\n            newInput.setAttribute('type', `${internalName}_${newNumber}`);\n\n            // Create wrapper.\n            const wrapper = document.createElement('div');\n            wrapper.className = 'input-wrapper';\n            wrapper.appendChild(newLabel);\n            wrapper.appendChild(newInput);\n\n            pairDiv.appendChild(wrapper);\n            newIds.push(newInput.id);\n        });\n\n        // Create delete button with data attributes\n        const deleteBtn = document.createElement('button');\n        deleteBtn.className = 'btn btn-danger param-delete';\n        deleteBtn.textContent = 'Delete';\n        deleteBtn.setAttribute('data-param-num', currentMax);\n        deleteBtn.setAttribute('data-param-model', e.detail.dataset.model);\n        deleteBtn.onclick = function() {\n            const model = this.dataset.model;\n            const paramNum = this.dataset.paramNum;\n\n            deleteParameters(model, paramNum);\n            // Remove the input elements.\n            pairDiv.remove();\n        };\n\n        // Assemble the pair\n        pairDiv.appendChild(deleteBtn);\n\n        lastBreak.insertAdjacentElement('afterend', pairDiv);\n\n        const newBreak = document.createElement('span');\n        newBreak.className = \"break new-break\";\n        pairDiv.insertAdjacentElement('afterend', newBreak);\n\n        // Add the IDs of newly added fields to the tempFieldsInput, so that we\n        // can collect them easily when the form is submitted.\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        let tempids = JSON.parse(tempFieldsInput.value);\n        const tempData = {\n            model: e.detail.dataset.model,\n            ids: newIds,\n            index: currentMax, // This is 0-based, so lower than newNumber.\n        };\n        tempids.push(tempData);\n        tempFieldsInput.value = JSON.stringify(tempids);\n    };\n\n    dynamicForm.addEventListener(dynamicForm.events.SUBMIT_BUTTON_PRESSED, () => {\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        const addedParamIds = JSON.parse(tempFieldsInput.value);\n        const newParamData = collectNewParamData(addedParamIds);\n        tempFieldsInput.value = JSON.stringify(newParamData);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true,\n        }).then(result => {\n            return result;\n        }).catch(err => err);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.NOSUBMIT_BUTTON_PRESSED, (e) => {\n        e.preventDefault();\n        const action = e.detail.dataset.action;\n        const targetModeIsEditing = e.detail.name == 'edititemparams';\n        switch (action) {\n            case 'edititemparams':\n                switchEditMode(targetModeIsEditing);\n                break;\n            case 'additemparams':\n                addItemParams(e);\n                break;\n            default:\n                // eslint-disable-next-line no-console\n                console.error(`Unknown no-submit action: ${action}`);\n        }\n\n    });\n};\n"],"names":["SELECTORS","disabledStates","syncSelectedState","model","selected","value","selectorModel","id","match","optionUpdateFun","option","removeAttribute","includes","setAttribute","document","querySelector","options","forEach","o","deleteParameters","index","tempFieldsInput","tempids","JSON","parse","filtered","filter","newparams","stringify","length","deletedParamsField","deletedParams","deleteParam","push","dynamicForm","DynamicForm","switchEditMode","targetModeIsEditing","searchParams","URLSearchParams","window","location","search","load","editing","testitemid","get","contextid","scaleid","component","updateitem","then","result","querySelectorAll","addEventListener","e","target","element","disabled","updateModelDisabledStates","async","addButton","container","modelName","getAttribute","modelFields","dataset","fields","split","map","fd","restructured","pairCounter","elements","Array","from","children","i","currentElement","cloneNode","tagName","_elements$getAttribut","startsWith","paramDiv","createElement","className","isValidGroup","currentIndex","field","label","input","breakElement","_input$getAttribute","wrapper","appendChild","classList","contains","deleteBtn","textContent","error","onclick","this","paramNum","remove","innerHTML","catch","err","addItemParams","lastBreak","detail","parentElement","previousElementSibling","existingInputs","closest","currentMax","Math","max","parseInt","newNumber","pairDiv","fielddata","newIds","fieldarr","internalName","newLabel","newInput","insertAdjacentElement","newBreak","tempData","ids","events","SUBMIT_BUTTON_PRESSED","newParamData","addedParamIds","finalData","newParam","params","getElementById","collectNewParamData","FORM_SUBMITTED","preventDefault","formcontainer","NOSUBMIT_BUTTON_PRESSED","action","name","console"],"mappings":"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"}