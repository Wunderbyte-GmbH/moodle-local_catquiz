{"version":3,"file":"testitem_model_overrides.min.js","sources":["../src/testitem_model_overrides.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\n\nconst SELECTORS = {\n    FORMCONTAINER: '#lcq_model_override_form',\n    NOEDITBUTTON: '[name=\"noedititemparams\"]',\n    MODELSTATUSSELECTS: '#lcq_model_override_form .custom-select[name^=\"override_\"]',\n    ACTIVEMODELSELECT: '[name=\"active_model\"]',\n    TEMP_FIELDS_INPUT: '[name=\"temporaryfields\"]',\n    DELETED_PARAMS_FIELD: '[name=\"deletedparams\"]'\n};\n\nconst disabledStates = [\"0\", \"-5\"];\n\n/**\n * Updates the active_model select according to the state of the model status\n *\n * If the state of the model is changed to excluded or not yet calculated, it can not be set as active model.\n * If the state is changed to something else, the disabled attribute is removed.\n *\n * @param {HTMLSelectElement} model\n */\nconst syncSelectedState = (model) => {\n        const selected = model.value;\n        const selectorModel = model.id.match(/id_override_(.*)_select/)[1];\n        let optionUpdateFun = (option) => option.removeAttribute('disabled');\n        if (disabledStates.includes(selected)) {\n            optionUpdateFun = (option) => option.setAttribute('disabled', 'disabled');\n        }\n        const activeModelSelect = document.querySelector(SELECTORS.ACTIVEMODELSELECT);\n        activeModelSelect.options.forEach((o) => {\n            if (o.value == selectorModel) {\n                optionUpdateFun(o);\n                return;\n            }\n        });\n};\n\nconst collectNewParamData = (addedParamIds) => {\n    console.log(\"Getting field values for added parameters\");\n    let finalData = {};\n    addedParamIds.forEach(newParam => {\n        const model = newParam.model;\n        finalData[model] = finalData[model] || [];\n        const ids = newParam.ids;\n        const params = {};\n        ids.forEach(id => {\n            const element = document.getElementById(id);\n            const value = element.value;\n            params[id] = value;\n        });\n        finalData[model].push(params)\n    });\n    return finalData;\n}\n\nconst deleteParameters = (model, index) => {\n    // First, check if this is found in the tempinput data. If so, just remove it from there.\n    const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n    let tempids = JSON.parse(tempFieldsInput.value);\n    let filtered = tempids.filter((newparams) => {\n        return newparams.model != model && newparams.index != index;\n    });\n    tempFieldsInput.value = JSON.stringify(filtered);\n    // If the parameter was found, it means we do not have to delete it on the server side.\n    // It was temporarily added but not yet saved. So we can return here.\n    if (filtered.length != tempids.length) {\n        return;\n    }\n\n    // If we are here, the parameter should be deleted on the server side.\n    const deletedParamsField = document.querySelector(SELECTORS.DELETED_PARAMS_FIELD);\n    let deletedParams = JSON.parse(deletedParamsField.value);\n    const deleteParam = {\n        model: model,\n        index: index\n    };\n    deletedParams.push(deleteParam);\n    deletedParamsField.value = JSON.stringify(deletedParams);\n};\n\n/**\n * This adds delete buttons to multiparam models.\n * While at it, it also restructures the HTML a bit by adding some wrapper elements to facilitate styling.\n */\nfunction restructureFormElements() {\n    // Find all .align-items-center containers\n    const containers = document.querySelectorAll('#lcq_model_override_form .param-group .align-items-center');\n\n    containers.forEach(container => {\n        // Check if this container has a fraction input\n        const fractionInput = container.querySelector('input[type^=\"fraction_\"]');\n        if (!fractionInput) return; // Skip if no fraction input found\n\n        // Find the model name from the Add button\n        const addButton = container.querySelector('[data-action=\"additemparams\"]');\n        const modelName = addButton?.getAttribute('data-model') || '';\n\n        const elements = Array.from(container.children);\n\n        // Create new array to store restructured elements\n        const restructured = [];\n        // Keep track of how many pairs we've processed for data-param-num\n        let pairCounter = 0;\n\n        // Process elements sequentially\n        for (let i = 0; i < elements.length; i++) {\n            const currentElement = elements[i];\n\n            // Check if this is the Add button container\n            if (currentElement.querySelector('[data-action=\"additemparams\"]')) {\n                restructured.push(currentElement.cloneNode(true));\n                continue;\n            }\n\n            // Check if this is the start of a fraction input group\n            if (currentElement.tagName === 'LABEL' && \n                elements[i + 1]?.tagName === 'INPUT' && \n                elements[i + 1].getAttribute('type')?.startsWith('fraction_')) {\n\n                // Find the corresponding difficulty elements\n                const nextLabel = elements[i + 3];\n                const nextInput = elements[i + 4];\n\n                if (nextInput?.getAttribute('type')?.startsWith('difficulty_')) {\n                    // Create pair wrapper\n                    const pairDiv = document.createElement('div');\n                    pairDiv.className = 'param-pair';\n\n                    // Create fraction wrapper\n                    const wrapper1 = document.createElement('div');\n                    wrapper1.className = 'input-wrapper';\n                    wrapper1.appendChild(currentElement.cloneNode(true));\n                    wrapper1.appendChild(elements[i + 1].cloneNode(true));\n\n                    // Create difficulty wrapper\n                    const wrapper2 = document.createElement('div');\n                    wrapper2.className = 'input-wrapper';\n                    wrapper2.appendChild(nextLabel.cloneNode(true));\n                    wrapper2.appendChild(nextInput.cloneNode(true));\n\n                    // Create delete button with data attributes\n                    const deleteBtn = document.createElement('button');\n                    deleteBtn.className = 'btn btn-danger param-delete';\n                    deleteBtn.textContent = 'Delete';\n                    deleteBtn.setAttribute('data-param-num', pairCounter);\n                    deleteBtn.setAttribute('data-model', modelName);\n                    deleteBtn.onclick = function() {\n                        const model = this.dataset.model;\n                        const paramNum = this.dataset.paramNum;\n\n                        deleteParameters(model, paramNum);\n                        // Remove the input elements.\n                        pairDiv.remove();\n                    };\n\n                    // Assemble the pair\n                    pairDiv.appendChild(wrapper1);\n                    pairDiv.appendChild(wrapper2);\n                    pairDiv.appendChild(deleteBtn);\n\n                    restructured.push(pairDiv);\n\n                    // Skip the elements we just processed\n                    i += 4;\n                    // Increment pair counter\n                    pairCounter++;\n                }\n            } else if (currentElement.classList.contains('break')) {\n                // Keep break elements\n                restructured.push(currentElement.cloneNode(true));\n            }\n        }\n\n        // Clear and repopulate the container\n        container.innerHTML = '';\n        restructured.forEach(element => container.appendChild(element));\n    });\n}\n\n/**\n * Add event listener to the form\n */\nexport const init = () => {\n    // Initialize the form - pass the container element and the form class name.\n    const dynamicForm = new DynamicForm(document.querySelector(\n        SELECTORS.FORMCONTAINER),\n        'local_catquiz\\\\form\\\\item_model_override_selector'\n    );\n\n    const switchEditMode = (targetModeIsEditing) => {\n        console.log(`Switching edit mode to: ${targetModeIsEditing}`);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: targetModeIsEditing,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true\n        }).then(\n            // Now that the model fields were added, we can add listeners to them.\n            (result) => {\n                const modelSelectors = document.querySelectorAll(SELECTORS.MODELSTATUSSELECTS);\n                modelSelectors.forEach(model => {\n                    syncSelectedState(model);\n                    model.addEventListener('change', (e) => syncSelectedState(e.target));\n            });\n                // Add delete buttons etc.\n                restructureFormElements();\n                return result;\n            }\n        ).catch(err => err);\n    }\n\n    const addItemParams = (e) => {\n        const searchParams = new URLSearchParams(window.location.search);\n        console.log('In add item params');\n        console.log(e);\n        // Construct the new input fields.\n        const lastBreak = e.detail.parentElement.parentElement.previousElementSibling;\n        const paramGroup = e.detail.closest('.param-group');\n        // Get the current highest number from existing fraction/difficulty inputs\n        const existingInputs = paramGroup.querySelectorAll('input[type^=\"fraction_\"], input[type^=\"difficulty_\"]');\n        const currentMax = Math.max(...Array.from(existingInputs)\n            .map(input => parseInt(input.getAttribute('type').split('_')[1] || '0'))\n        );\n        const newNumber = currentMax + 1;\n\n        const newFractionLabel = document.createElement('label');\n        newFractionLabel.textContent = `Fraction ${newNumber}`;\n        newFractionLabel.setAttribute('for', `fraction_${newNumber}`);\n        const newFractionInput = document.createElement('input');\n        newFractionInput.className = 'form-control param-input';\n        newFractionInput.id = `fraction_${newNumber}`;\n        newFractionInput.setAttribute('type', `fraction_${newNumber}`);\n\n        const newDifficultyLabel = document.createElement('label');\n        newDifficultyLabel.textContent = `Difficulty ${newNumber}`;\n        newDifficultyLabel.setAttribute('for', `difficulty_${newNumber}`);\n        const newDifficultyInput = document.createElement('input');\n        newDifficultyInput.className = 'form-control param-input';\n        newDifficultyInput.id = `difficulty_${newNumber}`;\n        newDifficultyInput.setAttribute('type', `difficulty_${newNumber}`);\n\n            const pairDiv = document.createElement('div');\n            pairDiv.className = 'param-pair';\n\n            // Create fraction wrapper\n            const wrapperDifficulty = document.createElement('div');\n            wrapperDifficulty.className = 'input-wrapper';\n            wrapperDifficulty.appendChild(newDifficultyLabel);\n            wrapperDifficulty.appendChild(newDifficultyInput);\n\n            // Create difficulty wrapper\n            const wrapperFraction = document.createElement('div');\n            wrapperFraction.className = 'input-wrapper';\n            wrapperFraction.appendChild(newFractionLabel);\n            wrapperFraction.appendChild(newFractionInput);\n\n            // Create delete button with data attributes\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'btn btn-danger param-delete';\n            deleteBtn.textContent = 'Delete';\n            deleteBtn.setAttribute('data-param-num', currentMax);\n            deleteBtn.setAttribute('data-param-model', e.detail.dataset.model);\n            deleteBtn.onclick = function() {\n                const model = this.dataset.model;\n                const paramNum = this.dataset.paramNum;\n\n                deleteParameters(model, paramNum);\n                // Remove the input elements.\n                pairDiv.remove();\n            };\n\n            // Assemble the pair\n            pairDiv.appendChild(wrapperFraction);\n            pairDiv.appendChild(wrapperDifficulty);\n            pairDiv.appendChild(deleteBtn);\n\n        lastBreak.insertAdjacentElement('afterend', pairDiv);\n\n        // lastBreak.insertAdjacentElement('afterend', newDifficultyInput);\n        // lastBreak.insertAdjacentElement('afterend', newDifficultyLabel);\n        // lastBreak.insertAdjacentElement('afterend', newFractionInput);\n        // lastBreak.insertAdjacentElement('afterend', newFractionLabel);\n\n\n        // Add the IDs of newly added fields to the tempFieldsInput, so that we\n        // can collect them easily when the form is submitted.\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        let tempids = JSON.parse(tempFieldsInput.value);\n        const tempData = {\n            model: e.detail.dataset.model,\n            ids: [newDifficultyInput.getAttribute('id'), newFractionInput.getAttribute('id')],\n            index: currentMax, // This is 0-based, so lower than newNumber.\n        };\n        tempids.push(tempData);\n        tempFieldsInput.value = JSON.stringify(tempids);\n    }\n\n    dynamicForm.addEventListener(dynamicForm.events.SUBMIT_BUTTON_PRESSED, (e) => {\n        console.log('Submit button pressed');\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        const addedParamIds = JSON.parse(tempFieldsInput.value);\n        console.log(addedParamIds);\n        const newParamData = collectNewParamData(addedParamIds);\n        // TODO: Replace with working code.\n        tempFieldsInput.value = JSON.stringify(newParamData);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n        console.log('Form submitted');\n        e.preventDefault();\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true,\n        });\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.NOSUBMIT_BUTTON_PRESSED, (e) => {\n        e.preventDefault();\n        const action = e.detail.dataset.action;\n        const targetModeIsEditing = e.detail.name = 'edititemparams';\n        switch (action) {\n            case 'edititemparams':\n                switchEditMode(targetModeIsEditing);\n                break;\n            case 'additemparams':\n                addItemParams(e);\n                break;\n            default:\n                console.log(`Unknown no-submit action: ${action}`)\n        }\n\n    });\n\n};\n"],"names":["SELECTORS","disabledStates","syncSelectedState","model","selected","value","selectorModel","id","match","optionUpdateFun","option","removeAttribute","includes","setAttribute","document","querySelector","options","forEach","o","deleteParameters","index","tempFieldsInput","tempids","JSON","parse","filtered","filter","newparams","stringify","length","deletedParamsField","deletedParams","deleteParam","push","dynamicForm","DynamicForm","switchEditMode","targetModeIsEditing","console","log","searchParams","URLSearchParams","window","location","search","load","editing","testitemid","get","contextid","scaleid","component","updateitem","then","result","querySelectorAll","addEventListener","e","target","container","addButton","modelName","getAttribute","elements","Array","from","children","restructured","pairCounter","i","currentElement","cloneNode","tagName","_elements$getAttribut","startsWith","nextLabel","nextInput","_nextInput$getAttribu","pairDiv","createElement","className","wrapper1","appendChild","wrapper2","deleteBtn","textContent","onclick","this","dataset","paramNum","remove","classList","contains","innerHTML","element","catch","err","addItemParams","lastBreak","detail","parentElement","previousElementSibling","existingInputs","closest","currentMax","Math","max","map","input","parseInt","split","newNumber","newFractionLabel","newFractionInput","newDifficultyLabel","newDifficultyInput","wrapperDifficulty","wrapperFraction","insertAdjacentElement","tempData","ids","events","SUBMIT_BUTTON_PRESSED","addedParamIds","newParamData","finalData","newParam","params","getElementById","collectNewParamData","FORM_SUBMITTED","preventDefault","formcontainer","NOSUBMIT_BUTTON_PRESSED","action","name"],"mappings":"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"}