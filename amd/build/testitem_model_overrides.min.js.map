{"version":3,"file":"testitem_model_overrides.min.js","sources":["../src/testitem_model_overrides.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\n\nconst SELECTORS = {\n    FORMCONTAINER: '#lcq_model_override_form',\n    NOEDITBUTTON: '[name=\"noedititemparams\"]',\n    MODELSTATUSSELECTS: '#lcq_model_override_form .custom-select[name^=\"override_\"]',\n    ACTIVEMODELSELECT: '[name=\"active_model\"]',\n    TEMP_FIELDS_INPUT: '[name=\"temporaryfields\"]'\n};\n\nconst disabledStates = [\"0\", \"-5\"];\n\n/**\n * Updates the active_model select according to the state of the model status\n *\n * If the state of the model is changed to excluded or not yet calculated, it can not be set as active model.\n * If the state is changed to something else, the disabled attribute is removed.\n *\n * @param {HTMLSelectElement} model\n */\nconst syncSelectedState = (model) => {\n        const selected = model.value;\n        const selectorModel = model.id.match(/id_override_(.*)_select/)[1];\n        let optionUpdateFun = (option) => option.removeAttribute('disabled');\n        if (disabledStates.includes(selected)) {\n            optionUpdateFun = (option) => option.setAttribute('disabled', 'disabled');\n        }\n        const activeModelSelect = document.querySelector(SELECTORS.ACTIVEMODELSELECT);\n        activeModelSelect.options.forEach((o) => {\n            if (o.value == selectorModel) {\n                optionUpdateFun(o);\n                return;\n            }\n        });\n};\n\nconst collectNewParamData = (addedParamIds) => {\n    console.log(\"Getting field values for added parameters\");\n    let finalData = {};\n    addedParamIds.forEach(newParam => {\n        const model = newParam.model;\n        finalData[model] = finalData[model] || [];\n        const ids = newParam.ids;\n        const params = {};\n        ids.forEach(id => {\n            const element = document.getElementById(id);\n            const value = element.value;\n            params[id] = value;\n        });\n        finalData[model].push(params)\n    });\n    return finalData;\n}\n\n/**\n * Add event listener to the form\n */\nexport const init = () => {\n    // Initialize the form - pass the container element and the form class name.\n    const dynamicForm = new DynamicForm(document.querySelector(\n        SELECTORS.FORMCONTAINER),\n        'local_catquiz\\\\form\\\\item_model_override_selector'\n    );\n\n    const switchEditMode = (targetModeIsEditing) => {\n        console.log(`Switching edit mode to: ${targetModeIsEditing}`);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: targetModeIsEditing,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true\n        }).then(\n            // Now that the model fields were added, we can add listeners to them.\n            (result) => {\n                const modelSelectors = document.querySelectorAll(SELECTORS.MODELSTATUSSELECTS);\n                modelSelectors.forEach(model => {\n                    syncSelectedState(model);\n                    model.addEventListener('change', (e) => syncSelectedState(e.target));\n            });\n                return result;\n            }\n        ).catch(err => err);\n    }\n\n    const addItemParams = (e) => {\n        const searchParams = new URLSearchParams(window.location.search);\n        console.log('In add item params');\n        console.log(e);\n        // Construct the new input fields.\n        const lastBreak = e.detail.parentElement.parentElement.previousElementSibling;\n        const paramGroup = e.detail.closest('.param-group');\n        // Get the current highest number from existing fraction/difficulty inputs\n        const existingInputs = paramGroup.querySelectorAll('input[type^=\"fraction_\"], input[type^=\"difficulty_\"]');\n        const currentMax = Math.max(...Array.from(existingInputs)\n            .map(input => parseInt(input.getAttribute('type').split('_')[1] || '0'))\n        );\n        const newNumber = currentMax + 1;\n\n        const newFractionLabel = document.createElement('label');\n        newFractionLabel.textContent = `Fraction ${newNumber}`;\n        newFractionLabel.setAttribute('for', `fraction_${newNumber}`);\n        const newFractionInput = document.createElement('input');\n        newFractionInput.className = 'form-control param-input';\n        newFractionInput.id = `fraction_${newNumber}`;\n        newFractionInput.setAttribute('type', `fraction_${newNumber}`);\n\n        const newDifficultyLabel = document.createElement('label');\n        newDifficultyLabel.textContent = `Difficulty ${newNumber}`;\n        newDifficultyLabel.setAttribute('for', `difficulty_${newNumber}`);\n        const newDifficultyInput = document.createElement('input');\n        newDifficultyInput.className = 'form-control param-input';\n        newDifficultyInput.id = `difficulty_${newNumber}`;\n        newDifficultyInput.setAttribute('type', `difficulty_${newNumber}`);\n\n        lastBreak.insertAdjacentElement('afterend', newDifficultyInput);\n        lastBreak.insertAdjacentElement('afterend', newDifficultyLabel);\n        lastBreak.insertAdjacentElement('afterend', newFractionInput);\n        lastBreak.insertAdjacentElement('afterend', newFractionLabel);\n\n\n        // Add the IDs of newly added fields to the tempFieldsInput, so that we\n        // can collect them easily when the form is submitted.\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        let tempids = JSON.parse(tempFieldsInput.value);\n        const tempData = {\n            model: e.detail.dataset.model,\n            ids: [newDifficultyInput.getAttribute('id'), newFractionInput.getAttribute('id')]\n        }\n        tempids.push(tempData);\n        tempFieldsInput.value = JSON.stringify(tempids);\n    }\n\n    dynamicForm.addEventListener(dynamicForm.events.SUBMIT_BUTTON_PRESSED, (e) => {\n        console.log('Submit button pressed');\n        const tempFieldsInput = document.querySelector(SELECTORS.TEMP_FIELDS_INPUT);\n        const addedParamIds = JSON.parse(tempFieldsInput.value);\n        console.log(addedParamIds);\n        const newParamData = collectNewParamData(addedParamIds);\n        // TODO: Replace with working code.\n        tempFieldsInput.value = JSON.stringify(newParamData);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n        console.log('Form submitted');\n        e.preventDefault();\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        const searchParams = new URLSearchParams(window.location.search);\n        dynamicForm.load({\n            editing: formcontainer.querySelector(SELECTORS.NOEDITBUTTON) ? false : true,\n            testitemid: searchParams.get(\"id\"),\n            contextid: searchParams.get(\"contextid\"),\n            scaleid: searchParams.get(\"scaleid\"),\n            component: searchParams.get(\"component\"),\n            updateitem: true,\n        });\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.NOSUBMIT_BUTTON_PRESSED, (e) => {\n        let formcontainer = document.querySelector(\n            SELECTORS.FORMCONTAINER);\n        e.preventDefault();\n        switch (e.detail.name) {\n            case 'edititemparams':\n                switchEditMode(true);\n                break;\n            case 'noedititemparams':\n                switchEditMode(false);\n                break;\n            case 'override_grm[additemparams]':\n                addItemParams(e);\n                break;\n            default:\n                console.log(`Unknown no-submit action: ${e.detail.name}`)\n        }\n    });\n};\n"],"names":["SELECTORS","disabledStates","syncSelectedState","model","selected","value","selectorModel","id","match","optionUpdateFun","option","removeAttribute","includes","setAttribute","document","querySelector","options","forEach","o","dynamicForm","DynamicForm","switchEditMode","targetModeIsEditing","console","log","searchParams","URLSearchParams","window","location","search","load","editing","testitemid","get","contextid","scaleid","component","updateitem","then","result","querySelectorAll","addEventListener","e","target","catch","err","events","SUBMIT_BUTTON_PRESSED","tempFieldsInput","addedParamIds","JSON","parse","newParamData","finalData","newParam","ids","params","getElementById","push","collectNewParamData","stringify","FORM_SUBMITTED","preventDefault","formcontainer","NOSUBMIT_BUTTON_PRESSED","detail","name","lastBreak","parentElement","previousElementSibling","existingInputs","closest","newNumber","Math","max","Array","from","map","input","parseInt","getAttribute","split","newFractionLabel","createElement","textContent","newFractionInput","className","newDifficultyLabel","newDifficultyInput","insertAdjacentElement","tempids","tempData","dataset","addItemParams"],"mappings":"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"}