{"version":3,"file":"graphicalsummary.min.js","sources":["../src/graphicalsummary.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_catquiz\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\n\n\n/**\n * Add event listeners.\n */\nexport const init = async() => {\n    const rows = document.querySelectorAll('tr>td>.clickable');\n    rows.forEach(row => {\n        if (row.initialized) {\n            return;\n        }\n        row.initialized = true;\n        row.addEventListener('click', async function() {\n            // Show loader icon until we have the question.\n            let iconPromise = addIconToContainerWithPromise(row);\n            const attemptid = this.getAttribute('data-attemptid');\n            const slot = this.getAttribute('data-slot');\n            const name = this.getAttribute('data-name');\n            const questiondata = await fetchQuestionData(slot, attemptid);\n            // Hide the loader icon by resolving it.\n            iconPromise.resolve();\n            const modal = await ModalFactory.create({\n                title: name,\n                body: questiondata.questionhtml,\n            });\n            modal.show();\n        });\n    });\n};\n\n/**\n * @param {integer} slot Question slot\n * @param {integer} attemptid The attempt ID\n * @return string\n */\nconst fetchQuestionData = async(slot, attemptid) => {\n    let data = await Ajax.call([{\n        methodname: 'local_catquiz_render_question_with_response',\n        args: {\n            slot: slot,\n            attemptid: attemptid,\n        }\n    }])[0];\n    return {\n        questionhtml: data.questionhtml,\n    };\n};\n"],"names":["async","document","querySelectorAll","forEach","row","initialized","addEventListener","iconPromise","attemptid","this","getAttribute","slot","name","questiondata","fetchQuestionData","resolve","ModalFactory","create","title","body","questionhtml","show","Ajax","call","methodname","args"],"mappings":";;;;;0LA8BoBA,UACHC,SAASC,iBAAiB,oBAClCC,SAAQC,MACLA,IAAIC,cAGRD,IAAIC,aAAc,EAClBD,IAAIE,iBAAiB,SAASN,qBAEtBO,aAAc,8CAA8BH,WAC1CI,UAAYC,KAAKC,aAAa,kBAC9BC,KAAOF,KAAKC,aAAa,aACzBE,KAAOH,KAAKC,aAAa,aACzBG,mBAAqBC,kBAAkBH,KAAMH,WAEnDD,YAAYQ,iBACQC,uBAAaC,OAAO,CACpCC,MAAON,KACPO,KAAMN,aAAaO,gBAEjBC,qBAUZP,kBAAoBd,MAAMW,KAAMH,aAQ3B,CACHY,oBARaE,cAAKC,KAAK,CAAC,CACxBC,WAAY,8CACZC,KAAM,CACFd,KAAMA,KACNH,UAAWA,cAEf,IAEmBY"}